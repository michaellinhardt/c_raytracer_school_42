<signal name="key-press-event" handler="on_key_press" swapped="no"/>

static void	switch_scene(t_gen *s, t_scene **first)
{
	t_scene *tmp;
	t_scene *temp;

	if (!s->sc->next)
		return ;

	tmp = *first;
	*first = (*first)->next;
	temp = *first;
	while (temp->next)
		temp = temp->next;
	tmp->next = NULL;
	temp->next = tmp;
}	

static void rotate(t_gen *s, int key)
{
	t_vector new;
	t_vector obj;

	if (s->to_move->type == SPHERE)
		new = newVector(s->to_move->cut[0], s->to_move->cut[1], s->to_move->cut[2]);
	else if (s->to_move->type == PLAN)
		new = newVector(s->to_move->pos[0], s->to_move->pos[1], s->to_move->pos[2]);
	// else if (s->to_move->type == CYLINDRE)
		// new = newVector(s->to_move->cut[0], s->to_move->cut[1], s->to_move->cut[2]);
	obj = newVector(s->to_move->pos[0], s->to_move->pos[1], s->to_move->pos[2]);
	if (key == KEY_NIN)
		new = MatricerotZ(new, vectorDot(new, obj));
	if (key == KEY_SIX)
		new = MatricerotY(new, vectorDot(new, obj));
	if (key == KEY_THR)
		new = MatricerotX(new, vectorDot(new, obj));
	if (s->to_move->type == SPHERE)
	{
		s->to_move->cut[0] = new.x;
		s->to_move->cut[1] = new.y;
		s->to_move->cut[2] = new.z;
	}
	else
	{
		s->to_move->pos[0] = new.x;
		s->to_move->pos[1] = new.y;
		s->to_move->pos[2] = new.z;
	}
}

void		move_complex(t_gen *s, int key)
{
	t_obj *tmp;

	tmp = s->to_move->comp;
	while (tmp)
	{
		if (key == KEY_ONE)
			tmp->pos[0] -= 1.0;
		else if (key == KEY_TWO)
			tmp->pos[0] += 1.0;
		else if (key == KEY_FOU)
			tmp->pos[1] -= 1.0;
		else if (key == KEY_FIV)
			tmp->pos[1] += 1.0;
		else if (key == KEY_SEV)
			tmp->pos[2] -= 1.0;
		else if (key == KEY_EIG)
			tmp->pos[2] += 1.0;
		tmp = tmp->next;
	}
}

G_MODULE_EXPORT	gboolean	on_key_press(GtkWidget *widget, GdkEvent  *event, void *user_data)
{
	GdkEventKey *key;
	(void)user_data;
	(void)widget;
	key = (void*)event;

	t_gen *s = user_data;

	if (!s->to_move)
		return (0);
	if (s->to_move->type == COMPLEXE)
		move_complex(s, key->keyval);
	if(key->keyval == GDK_KEY_Escape)
		exit(0);
	else if (key->keyval == GDK_KEY_s)
		s->rep ^= SAVE;
	else if (key->keyval == GDK_KEY_Right)
		switch_scene(s, &s->sc);
	else if (key->keyval ==  GDK_KEY_End)
		print_scene(s);
	else if (key->keyval == GDK_KEY_KP_1)
		s->to_move->pos[0] -= 1.0;
	else if (key->keyval == GDK_KEY_KP_2)
		s->to_move->pos[0] += 1.0;
	else if (key->keyval == GDK_KEY_KP_4)
		s->to_move->pos[1] -= 1.0;
	else if (key->keyval == GDK_KEY_KP_5)
		s->to_move->pos[1] += 1.0;
	else if (key->keyval == GDK_KEY_KP_7)
		s->to_move->pos[2] -= 1.0;
	else if (key->keyval == GDK_KEY_KP_8)
		s->to_move->pos[2] += 1.0;
	else if (key->keyval == GDK_KEY_KP_3 || key->keyval == GDK_KEY_KP_6 || key->keyval == GDK_KEY_KP_9)
		rotate(s, key->keyval);
	raytracing(s);
	return 0;	
}